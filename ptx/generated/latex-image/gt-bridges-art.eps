%!PS-Adobe-3.0 EPSF-3.0
%Produced by poppler pdftops version: 0.63.0 (http://poppler.freedesktop.org)
%%Creator: TeX
%%LanguageLevel: 2
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 119 631 415 708
%%HiResBoundingBox: 119 631 415 708
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2011 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  /setpagedevice where {
    pop 2 dict begin
      /Policies 1 dict dup begin /PageSize 6 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop
  } ifelse
} def
/pdfSetupPaper {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfPatternCS false def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Tp { /pdfPatternCS exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/xyshow where {
  pop
  /xyshow2 {
    dup length array
    0 2 2 index length 1 sub {
      2 index 1 index 2 copy get 3 1 roll 1 add get
      pdfTextMat dtransform
      4 2 roll 2 copy 6 5 roll put 1 add 3 1 roll dup 4 2 roll put
    } for
    exch pop
    xyshow
  } def
}{
  /xyshow2 {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval show moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval show moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/cshow where {
  pop
  /xycp {
    0 3 2 roll
    {
      pop pop currentpoint 3 2 roll
      1 string dup 0 4 3 roll put false charpath moveto
      2 copy get 2 index 2 index 1 add get
      pdfTextMat dtransform rmoveto
      2 add
    } exch cshow
    pop pop
  } def
}{
  /xycp {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval false charpath moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval false charpath moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/Tj {
  fCol
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 4 2 roll
  pdfTextRender 1 and 0 eq {
    2 copy xyshow2
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    3 index 3 index moveto
    2 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    xycp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    4 2 roll moveto xycp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    pop pop pop pop
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { 0.001 mul pdfFontSize mul pdfHorizScaling mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { 0.001 mul pdfFontSize mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2/3 image operators
/pdfImBuf 100 string def
/pdfImStr {
  2 copy exch length lt {
    2 copy get exch 1 add exch
  } {
    ()
  } ifelse
} def
/skipEOD {
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfIm { image skipEOD } def
/pdfImM { fCol imagemask skipEOD } def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
%%EndProlog
%%BeginSetup
xpdf begin
%%EndSetup
pdfStartPage
%%EndPageSetup
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
119 631 296 77 re
W
q
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
[1 0 0 1 273.391 670.621] cm
q
/DeviceGray {} CS
[0] SC
/DeviceGray {} cs
[0] sc
0.3985 w
q
-153.07172 -71.43353 303.59208 135.21339 re
W
q
/DeviceRGB {} CS
[0.5726 0.6353 1] SC
/DeviceRGB {} cs
[0.5726 0.6353 1] sc
-153.07172 -33.1656 293.38747 63.52487 re
f
Q
q
0.79701 w
/DeviceRGB {} cs
[0.7372 0.7647 0.651] sc
-12.75595 12.75595 m
-16.29567 14.8798 -20.20235 14.59937 -25.51193 15.30731 c
-30.82155 16.01523 -43.94443 18.21225 -51.0239 17.85828 c
-58.10336 17.50427 -71.93419 17.71156 -76.53586 12.75595 c
-81.13751 7.80035 -84.89745 -13.2566 -84.1895 -17.85828 c
-83.48158 -22.45993 -79.57494 -20.40962 -71.43353 -20.40962 c
-63.29213 -20.40962 -34.36127 -18.9202 -25.51193 -17.85828 c
-16.66261 -16.79636 -11.19337 -15.23376 -7.65364 -12.75595 c
-4.11392 -10.27815 0.70792 -3.53972 0 0 c
-0.70792 3.53972 -9.21622 10.63211 -12.75595 12.75595 c
h
f
-12.75595 12.75595 m
-16.29567 14.8798 -20.20235 14.59937 -25.51193 15.30731 c
-30.82155 16.01523 -43.94443 18.21225 -51.0239 17.85828 c
-58.10336 17.50427 -71.93419 17.71156 -76.53586 12.75595 c
-81.13751 7.80035 -84.89745 -13.2566 -84.1895 -17.85828 c
-83.48158 -22.45993 -79.57494 -20.40962 -71.43353 -20.40962 c
-63.29213 -20.40962 -34.36127 -18.9202 -25.51193 -17.85828 c
-16.66261 -16.79636 -11.19337 -15.23376 -7.65364 -12.75595 c
-4.11392 -10.27815 0.70792 -3.53972 0 0 c
-0.70792 3.53972 -9.21622 10.63211 -12.75595 12.75595 c
h
S
Q
q
0.79701 w
/DeviceRGB {} cs
[0.7372 0.7647 0.651] sc
10.2046 12.75595 m
11.97447 14.8798 19.84834 15.30731 25.51193 15.30731 c
31.17552 15.30731 45.00636 14.8798 51.0239 12.75595 c
57.04143 10.63211 65.69644 3.8937 68.88217 0 c
72.06792 -3.8937 76.46228 -12.47551 73.9845 -15.30731 c
71.5067 -18.1391 57.74936 -20.7636 51.0239 -20.40962 c
44.29843 -20.05563 30.11359 -14.17188 25.51193 -12.75595 c
20.91028 -11.34004 19.62813 -11.97447 17.85828 -10.2046 c
16.0884 -8.43475 13.81787 -3.18571 12.75595 0 c
11.69403 3.18571 8.43475 10.63211 10.2046 12.75595 c
h
f
10.2046 12.75595 m
11.97447 14.8798 19.84834 15.30731 25.51193 15.30731 c
31.17552 15.30731 45.00636 14.8798 51.0239 12.75595 c
57.04143 10.63211 65.69644 3.8937 68.88217 0 c
72.06792 -3.8937 76.46228 -12.47551 73.9845 -15.30731 c
71.5067 -18.1391 57.74936 -20.7636 51.0239 -20.40962 c
44.29843 -20.05563 30.11359 -14.17188 25.51193 -12.75595 c
20.91028 -11.34004 19.62813 -11.97447 17.85828 -10.2046 c
16.0884 -8.43475 13.81787 -3.18571 12.75595 0 c
11.69403 3.18571 8.43475 10.63211 10.2046 12.75595 c
h
S
Q
q
-153.07172 5.1023 m
-153.07172 5.1023 -125.42299 7.37282 -114.80379 10.2046 c
-104.18457 13.0364 -92.46466 24.09602 -76.53586 25.51193 c
-60.60704 26.92787 -15.92879 20.40962 0 20.40962 c
15.92879 20.40962 27.64871 26.57385 38.26791 25.51193 c
48.88712 24.45001 62.3769 15.58775 76.53586 12.75595 c
90.6948 9.92416 140.31575 5.1023 140.31575 5.1023 c
140.31575 76.53586 l
-153.07172 76.53586 l
W
[1 0 0 1 -6.37798 40.81906] cm
[5.86845 0 0 1.42883 0 0] cm
[1 0 0 1 0 0] cm
q
q
[1 0 0 1 -50 -50] cm
q
[1 0 0 1 0 0] cm
0 0 100 100 re
W
q
/DeviceRGB {} cs
/t0 0 def
/t1 100.00128 def
/dt 100.00128 def
/x0 0 def
/y0 0 def
/dx 0 def
/x1 0 def
/y1 100.00128 def
/dy 100.00128 def
/xMin 25.002984 def
/yMin 25.002792 def
/xMax 74.997015 def
/yMax 47.592394 def
/n 3 def
/func { dup 0 lt { pop 0 } { dup 100.00128 gt { pop 100.00128 } if } ifelse
0 index 1 exp 0 mul 0.73724 add
1 index 1 exp 0 mul 0.76471 add
2 index 1 exp 0 mul 0.65099 add
4 3 roll pop 
}
/xpdfFunc0_0 exch def
{ dup 0 lt { pop 0 } { dup 100.00128 gt { pop 100.00128 } if } ifelse
0 index 1 exp 0.11824 mul 0.73724 add
1 index 1 exp 0.10588 mul 0.76471 add
2 index 1 exp 0.15705 mul 0.65099 add
4 3 roll pop 
}
/xpdfFunc0_1 exch def
{ dup 0 lt { pop 0 } { dup 100.00128 gt { pop 100.00128 } if } ifelse
0 index 1 exp 0.11824 mul 0.85548 add
1 index 1 exp 0.10588 mul 0.87059 add
2 index 1 exp 0.15706 mul 0.80804 add
4 3 roll pop 
}
/xpdfFunc0_2 exch def
{ dup 0 lt { pop 0 } { dup 100.00128 gt { pop 100.00128 } if } ifelse
0 index 1 exp 0 mul 0.97372 add
1 index 1 exp 0 mul 0.97647 add
2 index 1 exp 0 mul 0.9651 add
4 3 roll pop 
}
/xpdfFunc0_3 exch def
{ dup 0 lt { pop 0 } { dup 100.00128 gt { pop 100.00128 } if } ifelse
dup 25.00032 lt { 0 sub 0.039999 mul 0 add xpdfFunc0_0 } {
dup 50.00064 lt { 25.00032 sub 0.039999 mul 0 add xpdfFunc0_1 } {
dup 75.00096 lt { 50.00064 sub 0.039999 mul 0 add xpdfFunc0_2 } {
75.00096 sub 0.039999 mul 0 add xpdfFunc0_3
} ifelse
} ifelse
} ifelse
}
def
0.250025 0.475918 0 axialSH
Q
Q
Q
Q
Q
q
0.79701 w
-153.07172 5.1023 m
-153.07172 5.1023 -125.42299 7.37282 -114.80379 10.2046 c
-104.18457 13.0364 -92.46466 24.09602 -76.53586 25.51193 c
-60.60704 26.92787 -15.92879 20.40962 0 20.40962 c
15.92879 20.40962 27.64871 26.57385 38.26791 25.51193 c
48.88712 24.45001 62.3769 15.58775 76.53586 12.75595 c
90.6948 9.92416 140.31575 5.1023 140.31575 5.1023 c
S
Q
q
-153.07172 -17.85828 m
-153.07172 -17.85828 -125.42299 -13.53745 -114.80379 -15.30731 c
-104.18457 -17.07716 -92.46466 -29.19838 -76.53586 -30.61426 c
-60.60704 -32.03012 -21.2384 -25.86588 0 -25.51193 c
21.2384 -25.158 58.83719 -28.77122 76.53586 -28.06328 c
94.23451 -27.35536 118.71043 -21.82553 127.55977 -20.40962 c
136.40909 -18.9937 140.31575 -17.85828 140.31575 -17.85828 c
140.31575 -76.53586 l
-153.07172 -76.53586 l
W
[1 0 0 1 -6.37798 -45.03664] cm
[5.86845 0 0 1.26012 0 0] cm
[1 0 0 1 0 0] cm
q
q
[1 0 0 1 -50 -50] cm
q
[1 0 0 1 0 0] cm
0 0 100 100 re
W
q
/DeviceRGB {} cs
/t0 0 def
/t1 100.00128 def
/dt 100.00128 def
/x0 0 def
/y0 0 def
/dx 0 def
/x1 0 def
/y1 100.00128 def
/dy 100.00128 def
/xMin 25.002984 def
/yMin 54.297718 def
/xMax 74.997015 def
/yMax 74.996976 def
/n 3 def
/func { dup 0 lt { pop 0 } { dup 100.00128 gt { pop 100.00128 } if } ifelse
0 index 1 exp 0 mul 0.93431 add
1 index 1 exp 0 mul 0.94118 add
2 index 1 exp 0 mul 0.91275 add
4 3 roll pop 
}
/xpdfFunc1_0 exch def
{ dup 0 lt { pop 0 } { dup 100.00128 gt { pop 100.00128 } if } ifelse
0 index 1 exp -0.09854 mul 0.93431 add
1 index 1 exp -0.08824 mul 0.94118 add
2 index 1 exp -0.13087 mul 0.91275 add
4 3 roll pop 
}
/xpdfFunc1_1 exch def
{ dup 0 lt { pop 0 } { dup 100.00128 gt { pop 100.00128 } if } ifelse
0 index 1 exp -0.09853 mul 0.83577 add
1 index 1 exp -0.08823 mul 0.85294 add
2 index 1 exp -0.13089 mul 0.78188 add
4 3 roll pop 
}
/xpdfFunc1_2 exch def
{ dup 0 lt { pop 0 } { dup 100.00128 gt { pop 100.00128 } if } ifelse
0 index 1 exp 0 mul 0.73724 add
1 index 1 exp 0 mul 0.76471 add
2 index 1 exp 0 mul 0.65099 add
4 3 roll pop 
}
/xpdfFunc1_3 exch def
{ dup 0 lt { pop 0 } { dup 100.00128 gt { pop 100.00128 } if } ifelse
dup 25.00032 lt { 0 sub 0.039999 mul 0 add xpdfFunc1_0 } {
dup 50.00064 lt { 25.00032 sub 0.039999 mul 0 add xpdfFunc1_1 } {
dup 75.00096 lt { 50.00064 sub 0.039999 mul 0 add xpdfFunc1_2 } {
75.00096 sub 0.039999 mul 0 add xpdfFunc1_3
} ifelse
} ifelse
} ifelse
}
def
0.54297 0.74996 0 axialSH
Q
Q
Q
Q
Q
q
0.79701 w
-153.07172 -17.85828 m
-153.07172 -17.85828 -125.42299 -13.53745 -114.80379 -15.30731 c
-104.18457 -17.07716 -92.46466 -29.19838 -76.53586 -30.61426 c
-60.60704 -32.03012 -21.2384 -25.86588 0 -25.51193 c
21.2384 -25.158 58.83719 -28.77122 76.53586 -28.06328 c
94.23451 -27.35536 118.71043 -21.82553 127.55977 -20.40962 c
136.40909 -18.9937 140.31575 -17.85828 140.31575 -17.85828 c
S
Q
q
/DeviceRGB {} cs
[0.8274 0.6745 0.4196] sc
-7.65364 2.55133 m
3.124 0.651 9.63196 0.651 20.40962 2.55133 c
17.85828 -5.1023 l
7.57054 -3.28835 1.35837 -3.28835 -8.92934 -5.1023 c
-7.65364 2.55133 l
h
f
Q
q
0.79701 w
-7.65364 2.55133 m
3.124 0.651 9.63196 0.651 20.40962 2.55133 c
17.85828 -5.1023 m
7.57054 -3.28835 1.35837 -3.28835 -8.92934 -5.1023 c
S
Q
q
/DeviceRGB {} cs
[0.8274 0.6745 0.4196] sc
44.6459 -38.26791 m
42.90479 -28.39323 45.45613 -22.63063 47.19725 -12.75595 c
39.5436 -10.2046 l
41.27791 -20.04071 40.00223 -25.88046 38.26791 -35.71657 c
44.6459 -38.26791 l
h
f
Q
q
0.79701 w
44.6459 -38.26791 m
42.90479 -28.39323 45.45613 -22.63063 47.19725 -12.75595 c
39.5436 -10.2046 m
41.27791 -20.04071 40.00223 -25.88046 38.26791 -35.71657 c
S
Q
q
/DeviceRGB {} cs
[0.8274 0.6745 0.4196] sc
40.81926 8.92934 m
39.11852 18.57503 36.14203 23.5199 34.44127 33.1656 c
28.06328 30.61426 l
32.77876 22.4468 32.49094 16.51588 35.71657 7.65364 c
40.81926 8.92934 l
h
f
Q
q
0.79701 w
40.81926 8.92934 m
39.11852 18.57503 36.14203 23.5199 34.44127 33.1656 c
28.06328 30.61426 m
32.77876 22.4468 32.49094 16.51588 35.71657 7.65364 c
S
Q
q
/DeviceRGB {} cs
[0.8274 0.6745 0.4196] sc
-17.85828 8.92934 m
-14.9689 16.86766 -11.87755 20.74727 -7.65364 28.06328 c
-12.75595 30.61426 l
-15.64531 22.6759 -18.7367 18.79628 -22.96057 11.48027 c
-17.85828 8.92934 l
h
f
Q
q
0.79701 w
-17.85828 8.92934 m
-14.9689 16.86766 -11.87755 20.74727 -7.65364 28.06328 c
-12.75595 30.61426 m
-15.64531 22.6759 -18.7367 18.79628 -22.96057 11.48027 c
S
Q
q
/DeviceRGB {} cs
[0.8274 0.6745 0.4196] sc
-52.29956 12.75595 m
-54.63518 21.47261 -54.85052 26.69243 -54.85052 35.71657 c
-61.22852 34.44127 l
-59.6615 25.554 -58.67757 20.50458 -58.67757 11.48027 c
-52.29956 12.75595 l
h
f
Q
q
0.79701 w
-52.29956 12.75595 m
-54.63518 21.47261 -54.85052 26.69243 -54.85052 35.71657 c
-61.22852 34.44127 m
-59.6615 25.554 -58.67757 20.50458 -58.67757 11.48027 c
S
Q
q
/DeviceRGB {} cs
[0.8274 0.6745 0.4196] sc
-70.15787 -38.26791 m
-69.34914 -29.02448 -66.95346 -24.0266 -63.77986 -15.30731 c
-70.15787 -12.75595 l
-71.8586 -22.40166 -74.00089 -27.53156 -76.53586 -36.99223 c
-70.15787 -38.26791 l
h
f
Q
q
0.79701 w
-70.15787 -38.26791 m
-69.34914 -29.02448 -66.95346 -24.0266 -63.77986 -15.30731 c
-70.15787 -12.75595 m
-71.8586 -22.40166 -74.00089 -27.53156 -76.53586 -36.99223 c
S
Q
q
/DeviceRGB {} cs
[0.8274 0.6745 0.4196] sc
-17.85828 -38.26791 m
-19.58583 -28.47012 -19.58583 -22.55374 -17.85828 -12.75595 c
-25.51193 -14.03163 l
-23.95714 -22.84961 -23.95714 -28.17424 -25.51193 -36.99223 c
-17.85828 -38.26791 l
h
f
Q
q
0.79701 w
-17.85828 -38.26791 m
-19.58583 -28.47012 -19.58583 -22.55374 -17.85828 -12.75595 c
-25.51193 -14.03163 m
-23.95714 -22.84961 -23.95714 -28.17424 -25.51193 -36.99223 c
S
Q
Q
Q
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%EOF
