<?xml version="1.0" encoding="UTF-8"?>

<section xmlns:xi="http://www.w3.org/2001/XInclude" xml:id="sec_intro-structures">
  <title>Discrete Structures</title>
  <introduction>
    <p>
      We are taking a <em>problem solving</em> approach to discrete mathematics: we will consider a large variety of questions that have a discrete feel to them, and consider how to answer those questions (and prove that our answers are correct).  This is not the only way to study discrete math.  Another approach would be to study the tools used to solve the problems.  We could study paint brushes and easels and the composition of paint, which would be interesting for sure, but I think it is more enjoyable to actually paint and learn how to create pretty little trees.  
    </p>

    <p>
      However, understanding your tools does help you use them, so in this section we will consider some of the basic tools used in discrete mathematics.  We will come back to these throughout our studies and understand them better as we need to. 
    </p>

    <p>
      <idx><h>discrete structures</h><see>structures</see></idx>
      <idx><h>structures</h></idx>
      The tools in our subject are called <term>discrete structures</term>.  They are the mathematical objects that we use to represent parts of the problems we are solving.  <q>Structure</q> is a good word here, since these <q>things</q> have fairly rigid constraints that make them what they are, just like an apartment building is going to have different characteristics than an airplane hanger or a suspension bridge (these types of physical structures, not mathematical structures, just to be overly clear and destroy the metaphor).
    </p>

    <p>
      The structures we will use most in discrete math are <term>sets</term>, <term>functions</term>, <term>sequences</term>, <term>relations</term>, <term>graphs</term>, and <term>statements</term>.  We will now briefly preview each of these.  As we progress through our studies, each will be explored in more detail.  In particular, if you need a refresher on sets and functions, or have not played with these much at all yet, they are treated in greater detail in <xref ref="sec_intro-sets"/> and <xref ref="sec_intro-functions"/>.
    </p>
    
  </introduction>

  <subsection xml:id="subsec_structures-sets">
    <title>Sets</title>
      <p>
      The most fundamental objects we will use in discrete mathematics
      (and really in all of math) are <term>sets</term>.
      Think of a set simply as a collection of <em>things</em>.  The things that belong to a set are called its <term>elements</term>, and two sets are the same precisely if they contain exactly the same <term>elements</term>.
    </p>

    <p>
      This is important!  As we will see, knowing when two mathematical objects are the same or different goes a long way to understanding the structure they belong to.  
    </p>

   
  </subsection>

  <subsection xml:id="subsec_structures-functions">
    <title>Functions</title>
    <introduction>
    <p>
      <idx>
        <h>function</h>
      </idx>
      <idx>
        <h>domain</h>
      </idx>
      <idx>
        <h>codomain</h>
      </idx>
      <idx>
        <h>image</h>
        <h>of an element</h>
      </idx>
      A <term>function</term>
      is a rule that assigns each input exactly one output.
      We call the output the <term>image</term> of the input.
      The set of all inputs for a function is called the <term>domain</term>.
      The set of all allowable outputs is called the
      <term>codomain</term>.
      We would write <m>f:X \to Y</m> to describe a function with name <m>f</m>,
      domain <m>X</m> and codomain <m>Y</m>.
      This does not tell us <em>which</em>
      function <m>f</m> is though.
      To define the function, we must describe the rule.
      This is often done by giving a formula to compute the output for any input
      (although this is certainly not the only way to describe the rule).
    </p>

    <p>
      For example, consider the function
      <m>f:\N \to \N</m> defined by <m>f(x) = x^2 + 3</m>.
      Here the domain and codomain are the same set
      (the natural numbers).
      The rule is: take your input,
      multiply it by itself and add 3.
      This works because we can apply this rule to every natural number
      (every element of the domain)
      and the result is always a natural number
      (an element of the codomain).
      Notice though that not every natural number is actually an output
      (there is no way to get 0, 1, 2, 5, etc.).
      The set of natural numbers that
      <em>are</em> outputs is called the
      <term>range</term>
      <idx>
        <h>range of a function</h>
      </idx>
      of the function
      (in this case,
      the range is <m>\{3, 4, 7, 12, 19, 28, \ldots\}</m>,
      all the natural numbers that are 3 more than a perfect square).
    </p>

    <p>
      The key thing that makes a rule a <em>function</em>
      is that there is <em>exactly one</em> output for each input.
      That is, it is important that the rule be a good rule.
      What output do we assign to the input 7?
      There can only be one answer for any particular function.
    </p>

    <example oldPERMID="Zsm">
      <statement>
        <p oldPERMID="jat">
          The following are all examples of functions:

          <ol>
            <li>
              <p>
                <m>f:\Z \to \Z</m> defined by <m>f(n) = 3n</m>.
                The domain and codomain are both the set of integers.
                However, the range is only the set of integer multiples of 3.
              </p>
            </li>

            <li>
              <p>
                <m>g: \{1,2,3\} \to \{a,b,c\}</m> defined by <m>g(1) = c</m>,
                <m>g(2) = a</m> and <m>g(3) = a</m>.
                The domain is the set <m>\{1,2,3\}</m>,
                the codomain is the set <m>\{a,b,c\}</m> and the range is the set <m>\{a,c\}</m>.
                Note that <m>g(2)</m> and <m>g(3)</m> are the same element of the codomain.
                This is okay since each element in the domain still has only one output.
              </p>
            </li>

            <li>
              <p>
                <m>h:\{1,2,3,4\} \to \N</m> defined by the table:
              </p>

              <sidebyside>

                <tabular>
                  <row bottom="minor">
                    <cell right="minor" halign="center">
                      <m>x</m>
                    </cell>
                    <cell>1</cell>
                    <cell>2</cell>
                    <cell>3</cell>
                    <cell>4</cell>
                  </row>
                  <row>
                    <cell right="minor" halign="center">
                      <m>h(x)</m>
                    </cell>
                    <cell>3</cell>
                    <cell>6</cell>
                    <cell>9</cell>
                    <cell>12</cell>
                  </row>
                </tabular>

              </sidebyside>

              <p>
                Here the domain is the finite set
                <m>\{1,2,3,4\}</m> and to codomain is the set of natural numbers,
                <m>\N</m>.
                At first you might think this function is the same as <m>f</m> defined above.
                It is absolutely not.
                Even though the rule is the same,
                the domain and codomain are different,
                so these are two different functions.
              </p>
            </li>
          </ol>
        </p>
      </statement>
    </example>

    <example>
      <statement>
        <p>
          Just because you can describe a rule in the same way you would write a function,
          does not mean that the rule is a function.
          The following are NOT functions.

          <ol>
            <li>
              <p>
                <m>f:\N \to \N</m> defined by <m>f(n) = \frac{n}{2}</m>.
                The reason this is not a function is because not every input has an output.
                Where does <m>f</m> send 3?
                The rule says that <m>f(3) = \frac{3}{2}</m>,
                but <m>\frac{3}{2}</m> is not an element of the codomain.
              </p>
            </li>

            <li>
              <p>
                Consider the rule that matches each person to their phone number.
                If you think of the set of people as the domain and the set of phone numbers as the codomain,
                then this is not a function, since some people have two phone numbers.
                Switching the domain and codomain sets doesn't help either,
                since some phone numbers belong to multiple people
                (assuming some households still have landlines when you are reading this).
              </p>
            </li>
          </ol>
        </p>
      </statement>
    </example>
    </introduction>
    <subsubsection>
      <title>Describing Functions</title>
      <idx>
        <h>function</h>
        <h>how to describe</h>
      </idx>
      <p>
      It is worth making a distinction between a function and its description.
      The function is the abstract mathematical object that in some way exists whether or not anyone ever talks about it.
      But when we <em>do</em> want to talk about the function,
      we need a way to describe it.
      A particular function can be described in multiple ways.
      </p>

      <p>
        <idx>
          <h sortby="rule of four">
            <em>rule of four</em>
          </h>
        </idx>
      Some calculus textbooks talk about the <em>Rule of Four</em>,
      that every function can be described in four ways:
      algebraically (a formula), numerically (a table), graphically,
      or in words.
      In discrete math,
      we can still use any of these to describe functions,
      but we can also be more specific since we are primarily concerned with functions that have <m>\N</m> or a finite subset of <m>\N</m> as their domain.
      </p>

      <p>
        <idx>
          <h>graph (of a function)</h>
        </idx>
      Describing a function graphically usually means drawing the graph of the function:
      plotting the points on the plane.
      We can do this,
      and might get a graph like the following for a function <m>f:\{1,2,3\} \to \{1,2,3\}</m>.
      </p>

      <sidebyside width="30%">

        <image xml:id="discrete-function-graph">

          <latex-image> \begin{tikzpicture}[scale=0.75]
            \draw[thin, gray!50] (0,0) grid (3.5, 3.5);
            \draw[-&gt;, thick] (0,0) -- (0,3.5);
            \draw[-&gt;, thick] (0,0) -- (3.5,0);
            \fill (1,2) circle (3pt) (2,1) circle (3pt) (3,3) circle (3pt);
          \end{tikzpicture}
          </latex-image>
        </image>

      </sidebyside>

      <p>
      It would be absolutely WRONG to connect the dots or try to fit them to some curve.
      There are only three elements in the domain.
      A curve would mean that the domain contains an entire interval of real numbers.
      </p>

      <p>
      Here is another way to represent that same function:
      </p>

      <sidebyside width="17%">

        <image xml:id="arrow-function-example">

          <latex-image> 
            \begin{tikzpicture}[scale=0.85]
              \draw[-&gt;] (-1,1) node[above] {1} -- (0,0) node[below] {2};
              \draw[-&gt;] (0,1) node[above] {2} -- (-1,0) node[below] {1};
              \draw[-&gt;] (1,1) node[above] {3} -- (1,0) node[below] {3};
            \end{tikzpicture}
          </latex-image>
        </image>

      </sidebyside>

      <p>
      This shows that the function <m>f</m> sends 1 to 2, 2 to 1 and 3 to 3:
      just follow the arrows.
      </p>

      <p>
      The arrow diagram used to define the function above can be very helpful in visualizing functions.
      We will often be working with functions with
        <em>finite</em> domains,
      so this kind of picture is often more useful than a traditional graph of a function.
      </p>

      <p>
      Note that for finite domains,
      finding an algebraic formula that gives the output for any input is often impossible.
      Of course we could use a piecewise defined function, like
        <me>
        f(x) = \begin{cases} x+1 \amp \text{ if } x = 1 \\ x-1 \amp \text{ if } x = 2 \\ x \amp \text{ if } x = 3\end{cases}
        </me>.
      This describes exactly the same function as above,
      but we can all agree is a ridiculous way of doing so.
      </p>

      <p>
      Since we will so often use functions with small domains and codomains,
      let's adopt some notation to describe them.
      All we need is some clear way of denoting the image of each element in the domain.
      In fact, writing a table of values would work perfectly:
      </p>

      <sidebyside>

        <tabular>
          <row bottom="minor">
            <cell right="minor" halign="center">
              <m>x</m>
            </cell>
            <cell>0</cell>
            <cell>1</cell>
            <cell>2</cell>
            <cell>3</cell>
            <cell>4</cell>
          </row>
          <row>
            <cell right="minor" halign="center">
              <m>f(x)</m>
            </cell>
            <cell>3</cell>
            <cell>3</cell>
            <cell>2</cell>
            <cell>4</cell>
            <cell>1</cell>
          </row>
        </tabular>

      </sidebyside>

      <p>
        <idx>
          <h>two-line notation</h>
        </idx>
        <idx>
          <h>function</h>
          <h>two-line notation</h>
        </idx>
      We simplify this further by writing this as a <q>matrix</q> with each input directly over its output:
        <me>
        f = \twoline{0 \amp 1 \amp 2\amp 3 \amp 4}{3 \amp 3 \amp 2 \amp 4 \amp 1}
        </me>.
      Note this is just notation and not the same sort of matrix you would find in a linear algebra class
      (it does not make sense to do operations with these matrices,
      or row reduce them, for example).
      </p>

      <p>
      One advantage of the two-line notation over the arrow diagrams is that it is harder to accidentally define a rule that is not a function using two-line notation.
      </p>

      <example>
        <statement>
          <p>
          Which of the following diagrams represent a function?
          Let <m>X = \{1,2,3,4\}</m> and <m>Y = \{a,b,c,d\}</m>.
          </p>

          <sidebyside widths="25% 25% 25%" margins="auto">

            <image xml:id="f-arrows" width="75%">

              <latex-image> \begin{tikzpicture}[scale=0.9]
                \draw[-&gt;] (-1.5,1) node[above] {1} -- (1.5,0) node[below] {\(d\)};
                \draw[-&gt;] (-.5,1) node[above] {2} -- (-1.5,0) node[below] {\(a\)};
                \draw[-&gt;] (.5,1) node[above] {3} -- (.5, 0) node[below] {\(c\)};
                \draw[-&gt;] (1.5,1) node[above] {4} -- (-.5, 0) node[below] {\(b\)};
                \node[above] at (0,1.5) {$f:X \to Y$};
              \end{tikzpicture}
              </latex-image>
            </image>

            <image xml:id="g-arrows" width="75%">

              <latex-image> \begin{tikzpicture}[scale=0.9]
                \draw[-&gt;] (-1.5,1) node[above] {1} -- (1.5,0) node[below] {\(d\)};
                \draw[-&gt;] (-.5,1) node[above] {2} -- (-1.6,0) node[below] {\(a\)};
                \draw[-&gt;] (.5,1) node[above] {3} -- (-1.4, 0);
                \draw[-&gt;] (1.5,1) node[above] {4} -- (-.5, 0) node[below] {\(b\)};
                \draw (.5,0) node[below] {\(c\)};
                \node[above] at (0,1.5) { $g:X \to Y$};
              \end{tikzpicture}
              </latex-image>
            </image>

            <image xml:id="h-arrows" width="75%">

              <latex-image> \begin{tikzpicture}[scale=0.9]
                \draw (-1.5,1) node[above] {1};
                \draw[-&gt;] (-.5,1) node[above] {2} (-.6,1) -- (-1.5,0) node[below] {\(a\)};
                \draw[-&gt;] (-.4,1) -- (.5,0);
                \draw[-&gt;] (.5,1) node[above] {3} -- (1.5, 0) node[below] {\(d\)};
                \draw[-&gt;] (1.5,1) node[above] {4} -- (-.5, 0) node[below] {\(b\)};
                \draw (.5,0) node[below] {\(c\)};
                \node[above] at (0,1.5) {$h:X \to Y$};
              \end{tikzpicture}
              </latex-image>
            </image>

          </sidebyside>
        </statement>
        <solution>
          <p>
            <m>f</m> is a function.
          So is <m>g</m>.
          There is no problem with an element of the codomain not being the image of any input,
          and there is no problem with <m>a</m> from the codomain being the image of both 2 and 3 from the domain.
          We could use our two-line notation to write these as
            <me> f= \begin{pmatrix} 1 \amp 2 \amp 3 \amp 4 \\ d \amp a \amp c \amp b \end{pmatrix} \qquad g = \begin{pmatrix} 1 \amp 2 \amp 3 \amp 4 \\ d \amp a \amp a \amp b \end{pmatrix}
            </me>.
          </p>

          <p>
          However, <m>h</m> is NOT a function.
          In fact, it fails for two reasons.
          First, the element 1 from the domain has not been mapped to any element from the codomain.
          Second, the element 2 from the domain has been mapped to more than one element from the codomain
          (            <m>a</m> and <m>c</m>).
          Note that either one of these problems is enough to make a rule not a function.
          In general, neither of the following mappings are functions:
          </p>

          <sidebyside widths="18% 27%" margins="auto">

            <image xml:id="not-function-a">

              <latex-image> \begin{tikzpicture}[scale=0.9]
                \fill (-1, 1.2) circle (.1) (0,1.2) circle (.1) (1, 1.2) circle (.1);
                \draw[-&gt;] (-1, 1) -- (-.5,0);
                \draw[-&gt;] (1,1) -- (.5, 0);
                \draw (-.5, -0.2) circle (.1) (.5, -0.2) circle (.1);
              \end{tikzpicture}
              </latex-image>
            </image>

            <image xml:id="not-function-b">

              <latex-image> \begin{tikzpicture}[scale=0.9]
                 \fill (-1, 1.2) circle (.1) (0,1.2) circle (.1) (1, 1.2) circle (.1);
                 \draw[-&gt;] (-1.1, 1) -- (-1.5, 0);
                 \draw[-&gt;] (-.9, 1) -- (-.5, 0);
                 \draw[-&gt;] (0,1) -- (.5,0);
                 \draw[-&gt;] (1,1) -- (1.5, 0);
                 \draw (-.5, -0.2) circle (.1) (.5, -0.2) circle (.1) (-1.5, -0.2) circle (.1) (1.5, -0.2) circle (.1);
               \end{tikzpicture}
              </latex-image>
            </image>

          </sidebyside>

          <p>
          It might also be helpful to think about how you would write the two-line notation for <m>h</m>.
          We would have something like:
            <me> h=\twoline{1 \amp 2 \amp 3 \amp 4}{\amp a,c? \amp d \amp b}
            </me>.
          There is nothing under 1 (bad) and we needed to put more than one thing under 2
          (very bad).
          With a rule that is actually a function,
          the two-line notation will always <q>work</q>.
          </p>
        </solution>
      </example>

      <p>
      We will also be interested in functions with domain <m>\N</m>.
      Here two-line notation is no good,
      but describing the function algebraically is often possible.
      Even tables are a little awkward,
      since they do not describe the function completely.
      For example, consider the function
        <m>f:\N \to \N</m> given by the table below.
      </p>

      <sidebyside>

        <tabular>
          <row bottom="minor">
            <cell right="minor" halign="center">
              <m>x</m>
            </cell>
            <cell>0</cell>
            <cell>1</cell>
            <cell>2</cell>
            <cell>3</cell>
            <cell>4</cell>
            <cell>5</cell>
            <cell>
              <m>\ldots</m>
            </cell>
          </row>
          <row>
            <cell right="minor" halign="center">
              <m>f(x)</m>
            </cell>
            <cell>0</cell>
            <cell>1</cell>
            <cell>4</cell>
            <cell>9</cell>
            <cell>16</cell>
            <cell>25</cell>
            <cell>
              <m>\ldots</m>
            </cell>
          </row>
        </tabular>

      </sidebyside>

      <p>
      Have I given you enough entries for you to be able to determine <m>f(6)</m>?
      You might guess that <m>f(6) = 36</m>,
      but there is no way for you to <em>know</em> this for sure.
      Maybe I am being a jerk and intended <m>f(6) = 42</m>.
      In fact, for every natural number <m>n</m>,
      there is a function that agrees with the table above,
      but for which <m>f(6) = n</m>.
      </p>

      <p>
      Okay, suppose I really did mean for <m>f(6) = 36</m>, and in fact,
      for the rule that you think is governing the function to actually be the rule.
      Then I should say what that rule is. <m>f(n) = n^2</m>.
      Now there is no confusion possible.
      </p>

      <p>
      Giving an explicit formula that calculates the image of any element in the domain is a great way to describe a function.
      We will say that these explicit rules are
        <term>closed formulas</term> for the function.
        <idx>
          <h>closed formula</h>
          <h>for a function</h>
        </idx>
      </p>

      <p>
      There is another very useful way to describe functions whose domain is <m>\N</m>,
      that rely specifically on the structure of the natural numbers.
      We can define a function <em>recursively</em>!
      </p>

      <example>
        <statement>
          <p>
          Consider the function <m>f:\N \to \N</m> given by
            <m>f(0) = 0</m> and <m>f(n+1) = f(n) + 2n+1</m>.
          Find <m>f(6)</m>.
          </p>
        </statement>
        <solution>
          <p>
          The rule says that <m>f(6) = f(5) + 11</m>
          (we are using <m>6 = n+1</m> so <m>n = 5</m>).
          We don't know what <m>f(5)</m> is though.
          Well, we know that <m>f(5) = f(4) + 9</m>.
          So we need to compute <m>f(4)</m>,
          which will require knowing <m>f(3)</m>,
          which will require <m>f(2)</m>, <ellipsis /> will it ever end?
          </p>

          <p>
          Yes!
          In fact, this process will always end because we have <m>\N</m> as our domain,
          so there is a least element.
          And we gave the value of <m>f(0)</m> explicitly, so we are good.
          In fact, we might decide to work up to <m>f(6)</m> instead of working down from <m>f(6)</m>:
            <md>
              <mrow>f(1) = \amp f(0) + 1 = \amp 0 + 1 = 1</mrow>
              <mrow>f(2) = \amp f(1) + 3 = \amp 1 + 3 = 4</mrow>
              <mrow>f(3) = \amp f(2) + 5 = \amp 4 + 5 = 9</mrow>
              <mrow>f(4) = \amp f(3) + 7 = \amp 9 + 7 = 16</mrow>
              <mrow>f(5) = \amp f(4) + 9 = \amp 16 + 9 = 25</mrow>
              <mrow>f(6) = \amp f(5) + 11 = \amp 25 + 11 = 36</mrow>
            </md>
          </p>

          <p>
          It looks that this recursively defined function is the same as the explicitly defined function <m>f(n) = n^2</m>.
          Is it?
          Later we will prove that it is.
          </p>
        </solution>
      </example>

      <p>
      Recursively defined functions are often easier to create from a
        <q>real world</q> problem,
      because they describe how the values of the functions are changing.
      However, this comes with a price.
      It is harder to calculate the image of a single input,
      since you need to know the images of other (previous) elements in the domain.
      </p>

      <assemblage>
        <title>Recursively Defined Functions</title>
        <idx>
          <h>recursively defined function</h>
        </idx>

        <p>
          <idx>
            <h>initial condition</h>
            <h>for a function</h>
          </idx>
          <idx>
            <h>recurrence relation</h>
            <h>for a function</h>
          </idx>
        For a function <m>f:\N \to \N</m>,
        a <term>recursive definition</term>
        consists of an <term>initial condition</term>
        together with a <term>recurrence relation</term>.
        The initial condition is the explicitly given value of <m>f(0)</m>.
        The recurrence relation is a formula for <m>f(n+1)</m> in terms for <m>f(n)</m>
        (and possibly <m>n</m> itself).
        </p>
      </assemblage>

      <example>
        <statement>
          <p>
          Give recursive definitions for the functions described below.

            <ol>
              <li>
                <p>
                  <m>f:\N \to \N</m> gives the number of snails in your terrarium <m>n</m> years after you built it,
                assuming you started with 3 snails and the number of snails doubles each year.
                </p>
              </li>

              <li>
                <p>
                  <m>g:\N \to \N</m> gives the number of push-ups you do <m>n</m> days after you started your push-ups challenge,
                assuming you could do 7 push-ups on day 0 and you can do 2 more push-ups each day.
                </p>
              </li>

              <li>
                <p>
                  <m>h:\N \to \N</m> defined by <m>h(n) = n!</m>.
                Recall that <m>n! = 1 \cdot 2 \cdot 3 \cdot \cdots \cdot (n-1)\cdot n</m> is the product of all numbers from <m>1</m> through <m>n</m>.
                We also define <m>0! = 1</m>.
                </p>
              </li>
            </ol>
          </p>
        </statement>
        <solution>
          <p>
            <ol>
              <li>
                <p>
                The initial condition is <m>f(0) = 3</m>.
                To get <m>f(n+1)</m> we would double the number of snails in the terrarium the previous year,
                which is given by <m>f(n)</m>.
                Thus <m>f(n+1) = 2f(n)</m>.
                The full recursive definition contains both of these, and would be written,
                  <me>
                  f(0) = 3;~ f(n+1) = 2f(n)
                  </me>.
                </p>
              </li>

              <li>
                <p>
                We are told that on day 0 you can do 7 push-ups, so <m>g(0) = 7</m>.
                The number of push-ups you can do on day <m>n+1</m> is 2 more than the number you can do on day <m>n</m>,
                which is given by <m>g(n)</m>.
                Thus
                  <me>
                  g(0) = 7;~ g(n+1) = g(n) + 2
                  </me>.
                </p>
              </li>

              <li>
                <p>
                Here <m>h(0) = 1</m>.
                To get the recurrence relation,
                think about how you can get
                  <m>h(n+1) = (n+1)!</m> from <m>h(n) = n!</m>.
                If you write out both of these as products,
                you see that <m>(n+1)!</m> is just like <m>n!</m> except you have one more term in the product,
                an extra <m>n+1</m>.
                So we have,
                  <me>
                  h(0) = 1;~ h(n+1) = (n+1)\cdot h(n)
                  </me>.
                </p>
              </li>
            </ol>
          </p>
        </solution>
      </example>
    </subsubsection>
  </subsection>

  <subsection xml:id="subsec_structures-others">
  <title>Other Discrete Structures</title>
  <introduction>
    <p>
      The set and function structures we have described above form a foundation for many more types of structures.  Soon we will do a deep dive into a few of these, that we briefly preview here.
    </p>
  </introduction>
  
  <subsubsection xml:id="subsubsec_structures-sequences">
    <title>Sequences</title>
    <p>
      Sometimes we are interested not just in a collection of numbers, but in what <em>order</em> those numbers appear.  In such cases, we cannot use <em>sets</em>, since they do not distinguish between the order of their elements.  Instead, we consider <term>sequences</term>.
    </p>

    <p>
      We will consider both <term>finite</term> and <term>infinite</term> sequences.  A finite sequence my be something as simple as <m>(1,2,3)</m>; that is a sequence with 3 elements, in that particular order.  Me might also call this an <term>ordered triple</term>, the same way that <m>(7,3)</m> is an ordered pair.  The key difference between the sequence <m>(1,2,3)</m> and the set <m>\{1,2,3\}</m> is that we <q>care</q> about the order.  That is, the sequence <m>(1,2,3)</m> is different from the sequence <m>(2,3,1)</m>, while the set <m>\{1,2,3\}</m> is exactly the same set as <m>\{2,3,1\}</m>.
    </p>

    <p>
      We will often use sequences as a counting tool.  For example, a very simple counting question is, <q>how many wheels do 100 cars have?</q>  Instead of answering just this one question, we could generalize and ask how many wheels <m>n</m> cars have, and get a sequence of answers.  This yields the infinite sequence <m>(4, 8, 12, \ldots )</m>.  The order these multiples of 4 appear in is important, since each number in the sequence corresponds to a specific version of the question.  
    </p>

    <p>
      It is fine to think of a sequence of numbers as an ordered list.  We can refer to the <term>terms</term> simply as 
      <me>
        a_0, a_1,a_2,\ldots
      </me>
      and might refer to the entire sequence as <m>(a_n)_{n\ge 0}</m> or <m>(a_n)_{n\in \N}</m>.  
    </p>
        
    <p>
      If we want to be a little more precise and more abstract, we can think of a sequence as a <em>function</em>.  The domain is the natural numbers or some subset of consecutive natural numbers (like <m>\{1,2,3,4\}</m>).  The codomain is any set.  We think of the domain as the positions in the sequence, and the image of those inputs as the terms in the sequence.
    </p>

    <p>
      For example, we might consider the Fibonacci sequence <m>(f_n)_{n\ge 1}</m>, which starts <m> 1, 1, 2, 3, 5, 8,\ldots</m>.  What is the 4th term in the sequence?  We might say <m>f_4 = 3</m> (this is assuming the the first 1 is the first term and not the 0th term).  Note that there can only be one 4th term.  There can only be one <m>n</m>-th term for any particular value of <m>n</m>.  So for any input (the position of the term) there is only one output (the term).  It would be perfectly reasonable to write <m>f(4) = 3</m>, and that really does look like a function.  But we like to use subscripts.
    </p>

    <p>
      We can also describe the terms in a sequence using a table.  We might write something like the following:
    </p>

    <tabular>
      <col right="minor"/><col/><col/><col/><col/><col/>
      <row bottom="minor">
        <cell><m>n</m></cell>
        <cell>1</cell>
        <cell>2</cell>
        <cell>3</cell>
        <cell>4</cell>
        <cell>...</cell>
      </row>
      <row>
        <cell><m>a_n</m></cell>
        <cell>1</cell>
        <cell>3</cell>
        <cell>6</cell>
        <cell>10</cell>
        <cell>...</cell>
      </row>
    </tabular>

    <p>
      This looks exactly like how you would describe a function, even though this table is describing the sequence of <term>triangular numbers</term> (we will see why they are called this later).  
    </p>

    <p>
      Since sequences are functions, we can use any of the techniques to describe functions to describe sequences.  In particular, we might give a <term>closed formula</term> for a sequence by explicitly giving the function for the <m>n</m>-th term.  For example, 
      <me>
        a_n = \frac{n(n+1)}{2}
      </me>.
      Alternatively, we could define a sequence recursively by saying how to get from one term to the next.  This is especially useful for the Fibonacci sequence:
      <me>
        f_n = f_{n-1} + f_{n-2}; f_1 = 1, f_2 = 1
      </me>.
    </p>

    <p>
      A large amount of our effort in understanding sequences will go into taking a recursive definition and finding a closed formula for the sequence.  We will study this, and everything else sequence related in <xref ref="ch_sequences"/>.
    </p>
  </subsubsection>

  <subsubsection xml:id="subsec_structures-graphs">
    <title>Graphs</title>
    <p>
      Consider the set <m>V = \{1, 2, 3, 4, 5, 6\}</m>.  Which pairs of numbers from that set add up to 7?  We could have <m>\{1,6\}</m> or <m>\{2, 5\}</m> or <m>\{3,4\}</m>.  We can picture the set and the interesting (unordered) pairs (i.e., two-element subsets) as a picture called a graph:     
    </p>

    <image xml:id="graphs-7sum" width="20%">
      <description>The graph of pairs of numbers 1 to 6 that sum to 7</description>
      <latex-image>
        \begin{tikzpicture}
          \foreach \x in {1,...,6}{
            \coordinate (a\x) at (120-\x*60: 1);
          }
          \draw (a1) node[above]{1} -- (a6) node[above]{6} (a2) node[right]{2} -- (a5) node[left]{5} (a3) node[below]{3} -- (a4) node[below]{4};
          \foreach \x in {1,...,6}{
            \fill (a\x) \v;
          }
        \end{tikzpicture}
      </latex-image>
    </image>

    <p>
      On the other hand, we might want to consider pairs of numbers whose sum is even.  Then, we would get the following picture.
    </p>

    <image xml:id="graphs-evensum" width="20%">
      <description>The graph of pairs of numbers 1 to 6 that have an even sum</description>
      <latex-image>
        \begin{tikzpicture}
          \foreach \x in {1,...,6}{
            \coordinate (a\x) at (120-\x*60: 1);
          }
          \draw (a1) node[above]{1} -- (a5) node[left]{5} (a2) node[right]{2} -- (a6) node[above]{6} (a3) node[below]{3} -- (a1) (a4) node[below]{4} -- (a6) (a2) -- (a4) (a3) -- (a5);
          \foreach \x in {1,...,6}{
            \fill (a\x) \v;
          }
        \end{tikzpicture}
      </latex-image>
    </image>
    <p>
      We call these discrete structures <term>graphs</term>.  We can think of them either as the drawings of dots and lines, or more precisely as a set of <term>vertices</term> together with a set of <term>edges</term>, where each edge is a two-element subset of the vertices.  Notice, we are using the structure <em>set</em> to define the structure <em>graph</em>.
    </p>

    <p>
      Graphs show up in all sorts of real-world applications: in a class, some students are friends with each other, so take the students to be the vertices and the edges to be the friendships.  In geography, some countries share a border, so take the countries to be the vertices and connect a pair of vertices with an edge if the countries share a border.  Perhaps you are planning a trip and want to fly from Denver to Paris.  Is there a direct flight, or do you need to stop in Newark?  That is, does the graph of flights have an edge between Denver and Paris or only between Denver and Newark and between Newark and Paris?  When your Amazon driver delivers packages to 10 houses in your neighborhood, how does her app know in which order to deliver the package?  Graph theory!
    </p>

    <p>
      The study of graphs is a subject in its own right, in which many mathematicians hold doctorate degrees and write hundreds of papers about each year.  We will scratch the surface of this fascinating subject in <xref ref="ch_graphtheory"/>
    </p>
  </subsubsection>

    <subsubsection xml:id="subsubsec_structures-statements">
    <title>Statements</title>
    <p>
      Time to get <em>meta</em>: we use language to make claims about mathematics, but we can also use mathematics to study the language and claims themselves.  <term>Mathematical logic</term> is the study of how statements behave and interact.  Since a particular statement can only be either <term>true</term> or <term>false</term>, such study falls squarely in the realm of discrete mathematics.  
    </p>

    <p>
      Logic considers the formal structure of statements, and how we can be sure that some statements must be a consequence of others.  For example, suppose you believe the following three statements:
      <ol>
        <li>
          <p>
            Bow ties are cool or mushrooms are good on pizza.
          </p>
        </li>
        <li>
          <p>
            If bow ties are cool, then Oscar wears bow ties.
          </p>
        </li>
        <li>
          <p>
            Mushrooms are <em>not</em> good on pizza.
          </p>
        </li>
      </ol>
      Can you conclude anything about whether Oscar wears bow ties?  Yes!  Since mushrooms are not good on pizza, it must be that bow ties are cool, and thus Oscar wears them.  
    </p>

    <p>
      They key that makes this argument work is the logical form of the statements involved and our agreement about the relationship between those forms and truth.  The first statement has the form <q><m>P</m> or <m>Q</m></q>, which in symbols we write <m>P \vee Q</m>.  We set rules for the conditions under which this <term>disjunction</term> (i.e. <q>or</q> statement) is true, depending only on the truth values of <m>P</m> and <m>Q</m>.  Similarly, the second statement has the form <m>P \imp Q</m>, which is true precisely when <m>P</m> is false or <m>Q</m> is true (we will convince ourselves this is the right choice later).   
    </p>

    <p>
      We will use statements throughout our studies of discrete math, but will consider them carefully in <xref ref="ch_logic"/>.
    </p>
    </subsubsection>
    <subsubsection xml:id="subsubsec_structures-even-more">
      <title>Even More Structures</title>
      <p>
        Our list of structures could go on and on, but we will stop here.  We will not consider <term>relations</term>, which is a generalization of functions and graphs.  We will not spend much time at all looking at <term>multisets</term>, which are just like sets except can have repeated elements.  Since this is not a geometry class, we will not consider <term>finite geometries</term>, or <term>designs</term> (which are somewhere between graphs and geometries).  Discrete structures are useful in computer science, but we will stop short of studying <term>linked lists</term> or <term>rooted trees</term>. Although abstract algebra is a fascinating subject, we will not get to <term>groups</term> or <term>rings</term> or <term>metroids</term> or <term>POSets</term> or <term>Boolean algebras</term> or ...
      </p>

      <p>
        The point is, discrete mathematics is awesome and you can spend multiple lifetimes studying it.  So what are we waiting for?  Let's dive in an solve some problems.
      </p>
    </subsubsection>
  </subsection>
</section>

